package collections

import (
	"container/list"
	"github.com/stretchr/testify/assert"
	"testing"
)

func TestDeque (t *testing.T) {
	dq := NewDeque()
	dq.Append(1)
	assert.Equal(t,  1, dq.Size())
	v, ok := dq.Pop()
	assert.Equal(t, 1, v)
	assert.Equal(t, true, ok)
	assert.Equal(t, 0, dq.Size())
	v, ok = dq.Pop()
	assert.Equal(t,nil, v)
	assert.Equal(t, false, ok)
	dq.Append(2)
	dq.AppendLeft(3)
	dq.Append(4)
	position, find := dq.Index(2, 3, 2)
	assert.Equal(t, -1, position)
	assert.Equal(t, false, find)
	position, find = dq.Index(2, 4, 6)
	assert.Equal(t, -1, position)
	assert.Equal(t, false, find)
	position, find = dq.Index(2, 0, 5)
	assert.Equal(t, 1, position)
	position, find = dq.Index(5, 0, 4)
	assert.Equal(t, 0, position)
	assert.Equal(t, false, find)
	v, ok = dq.Pop()
	assert.Equal(t, 4, v)
	v, ok = dq.PopLeft()
	assert.Equal(t, 3, v)
	other := list.New()
	other.PushBack(1)
	other.PushBack(2)
	other.PushFront(5)
	dq.Extend(other)
	v, ok = dq.Remove(2)
	assert.Equal(t, 1, v)
	dq.Clear()
	assert.Equal(t, 0, dq.Size())
	dq.Append(1)
	dq.AppendLeft(2)
	dq.Rotate(1)
	v, ok = dq.Pop()
	assert.Equal(t, 2, v)
	dq.Append(3)
	dq.Rotate(-1)
	v, ok = dq.Pop()
	assert.Equal(t, 1, v)
	v, ok = dq.Pop()
	assert.Equal(t, 3, v)
	dq.Append(3)
	dq.ExtendLeft(other)
	v, ok = dq.PopLeft()
	assert.Equal(t, 5, v)
}
